#!/usr/bin/env bash
#
# bootstrap creates links in the home directory
#
# run script with '--unattended' to create backups before overwriting files
# in the home directory

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    local currentSrc="$(readlink $dst)"
  
    if [ "$currentSrc" == "$src" ] # link wouldn't change
    then

      skip=true;

    elif [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then
        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$skip" == "true" ]
    then
      success "skipped $src"

    elif [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"

    elif [ "$backup" == "true" ]
    then
      if [ -f "$dst" ]
      then
        mv "$dst" "${dst}.backup"
        success "moved $dst to ${dst}.backup"
      fi
    fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $2 to $1"
  fi
}

link_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  if [ "$unattended" == "true" ]
  then
    backup_all=true
  fi

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_dotfiles () {
  local unattended=false

  # Run as unattended if stdin is closed
  if [ ! -t 0 ]; then
    unattended=true
  fi

  # Parse arguments
  while [ $# -gt 0 ]; do
    case $1 in
      --unattended) unattended=true ;;
    esac
    shift
  done

  link_dotfiles

  # find the installers and run them iteratively
  find . -name install.sh | while read installer ; do sh -c "${installer}" ; done
}

install_dotfiles "$@"


echo ''
printf '  \033[32mEverything installed!\033[m\n\n'
