" Include Plugins file
source $HOME/.nvimplugins

" PLUGIN SETUP

" path to your python
let g:python3_host_prog = '/usr/bin/python3'

"" vim-airline
let g:airline#extensions#tabline#enabled = 1
" show buffer number
let g:airline#extensions#tabline#buffer_nr_show = 1
" ale integration
let g:airline#extensions#ale#enabled = 1

"" rainbow
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
autocmd VimEnter * RainbowParentheses

"" vim-gitgutter
" show if fold contains changes
set foldtext=gitgutter#fold#foldtext()
" summary in the status line
function! GitStatus()
  let [a,m,r] = GitGutterGetHunkSummary()
  return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline+=%{GitStatus()}

"" vim-two-firewatch
set background=dark " alternative: light
let g:two_firewatch_italics=1
let g:airline_theme='twofirewatch'
colo two-firewatch

"" ncm2
autocmd BufEnter * call ncm2#enable_for_buffer()
set completeopt=noinsert,menuone,noselect
set shortmess+=c
" CTRL-C doesn't trigger the InsertLeave autocmd. map to <ESC> instead.
inoremap <c-c> <ESC>
" When the <Enter> key is pressed while the popup menu is visible, it only
" hides the menu. Use this mapping to close the menu and also start a new
" line.
inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<CR>" : "\<CR>")
" make it fast
let ncm2#popup_delay = 5
let ncm2#complete_length = [[1, 1]]
" Use new fuzzy based matches
let g:ncm2#matcher = 'substrfuzzy'

"" ncm2-ultisnips
" Press enter key to trigger snippet expansion
" The parameters are the same as `:help feedkeys()`
autocmd BufNewFile,BufRead * inoremap <silent> <buffer> <expr> <CR> ncm2_ultisnips#expand_or("\<CR>", 'n')
" c-j c-k for moving in snippet
let g:UltiSnipsExpandTrigger            = "<Plug>(ultisnips_expand)"
let g:UltiSnipsJumpForwardTrigger       = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger      = "<c-k>"
let g:UltiSnipsRemoveSelectModeMappings = 0

"" jedi-vim
" disable Jedi-vim autocompletion and enable call-signatures options
" (NCM2 is used for autocompletion)
let g:jedi#auto_initialization = 1
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0
let g:jedi#popup_on_dot = 0
let g:jedi#completions_command = ""
let g:jedi#show_call_signatures = "1"

"" ale
" linters
let g:ale_linters = {
\   'python': ['flake8'],
\}


" BASIC SETUP:

" tab = 4 spaces
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
" tab = 2 spaces in yaml files
autocmd FileType yaml setlocal ts=2 sw=2 sts=2

" Show whitespace characters
set list
set listchars=tab:▸\ ,eol:↳,trail:⋅

" use true color
set termguicolors

" enable syntax highlight and filetype detection
syntax enable
filetype plugin on

" case sensitive if search contains uppercase
set smartcase

" always show current line number and relative distance of other lines
set relativenumber
set nu rnu

" automatically hide modified buffers (without !)
set hidden

" keep undo history after closing file
set undofile
" make sure this directory exists!!
set undodir=~/.nvimundo/
" maximum number of changes that can be undone
set undolevels=10000
" maximum number lines to save for undo on a buffer reload
set undoreload=100000

" show vertical line at column 80 and 100 onwards
let &colorcolumn="80,".join(range(100,9999),",")

" keep five lines between the cursor and the edge of the screen
set scrolloff=5


" FOLDING:
set foldmethod=indent
" show folds in a column on the left
set foldcolumn=2


" FINDING FILES:
" - Hit tab to :find by partial match
" - Use * to make it fuzzy
" - :b lets you autocomplete any open buffer

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files when we tab complete
set wildmenu


" TAG JUMPING:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack
" - This doesn't help if you want a visual list of tags

" Create the `tags` file (may need to install ctags first)
command! MakeTags !ctags -R .


" AUTOCOMPLETE:
" - ^x^n for JUST this file
" - ^x^f for filenames (works with our path trick!)
" - ^x^] for tags only
" - ^n for anything specified by the 'complete' option
" - Use ^n and ^p to go back and forth in the suggestion list
" The good stuff is documented in |ins-completion|


" FILE BROWSING:
" - :edit a folder to open a file browser
" - <CR>/v/t to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings

" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'


" CUSTOM MAPPINGS:

" use space as leader key
let mapleader = " "
" strip trailing whitespaces
nmap <leader>w :StripWhitespace<CR>
" Tagbar
nnoremap <leader>t :TagbarToggle<CR>
" NERDTree
nnoremap <leader>e :NERDTreeToggle<CR>
" jump to buffer-number or last used buffer
nnoremap <leader><leader> <c-^>
" easier buffer navigation
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>
" use ; to write : (;; for ;)
map ; :
noremap ;; ;
